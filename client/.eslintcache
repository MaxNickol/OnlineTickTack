[{"Q:\\iTransition_Tasks\\Task#5\\client\\src\\index.js":"1","Q:\\iTransition_Tasks\\Task#5\\client\\src\\reportWebVitals.js":"2","Q:\\iTransition_Tasks\\Task#5\\client\\src\\App.js":"3","Q:\\iTransition_Tasks\\Task#5\\client\\src\\sockets\\Connection.js":"4","Q:\\iTransition_Tasks\\Task#5\\client\\src\\hooks\\useLogin.js":"5","Q:\\iTransition_Tasks\\Task#5\\client\\src\\Context\\Auth.context.js":"6","Q:\\iTransition_Tasks\\Task#5\\client\\src\\Context\\Rooms.context.js":"7","Q:\\iTransition_Tasks\\Task#5\\client\\src\\Connection\\socket_connection.js":"8","Q:\\iTransition_Tasks\\Task#5\\client\\src\\components\\Login.jsx":"9","Q:\\iTransition_Tasks\\Task#5\\client\\src\\components\\Rooms.jsx":"10","Q:\\iTransition_Tasks\\Task#5\\client\\src\\components\\NavBar.jsx":"11","Q:\\iTransition_Tasks\\Task#5\\client\\src\\components\\Modal.jsx":"12","Q:\\iTransition_Tasks\\Task#5\\client\\src\\components\\Field.jsx":"13","Q:\\iTransition_Tasks\\Task#5\\client\\src\\components\\Cell.jsx":"14"},{"size":507,"mtime":1608493514557,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":2028,"mtime":1608999985679,"results":"18","hashOfConfig":"16"},{"size":119,"mtime":1608575331838,"results":"19","hashOfConfig":"16"},{"size":1001,"mtime":1608984751684,"results":"20","hashOfConfig":"16"},{"size":202,"mtime":1608654121007,"results":"21","hashOfConfig":"16"},{"size":96,"mtime":1608663595387,"results":"22","hashOfConfig":"16"},{"size":148,"mtime":1608823421008,"results":"23","hashOfConfig":"16"},{"size":2984,"mtime":1609018968123,"results":"24","hashOfConfig":"16"},{"size":4490,"mtime":1609020419351,"results":"25","hashOfConfig":"16"},{"size":1741,"mtime":1609025579865,"results":"26","hashOfConfig":"16"},{"size":1110,"mtime":1609008142632,"results":"27","hashOfConfig":"16"},{"size":5564,"mtime":1609063677240,"results":"28","hashOfConfig":"16"},{"size":196,"mtime":1608902287558,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1kd4kda",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"Q:\\iTransition_Tasks\\Task#5\\client\\src\\index.js",[],["61","62"],"Q:\\iTransition_Tasks\\Task#5\\client\\src\\reportWebVitals.js",[],"Q:\\iTransition_Tasks\\Task#5\\client\\src\\App.js",[],"Q:\\iTransition_Tasks\\Task#5\\client\\src\\sockets\\Connection.js",[],"Q:\\iTransition_Tasks\\Task#5\\client\\src\\hooks\\useLogin.js",[],"Q:\\iTransition_Tasks\\Task#5\\client\\src\\Context\\Auth.context.js",[],"Q:\\iTransition_Tasks\\Task#5\\client\\src\\Context\\Rooms.context.js",[],"Q:\\iTransition_Tasks\\Task#5\\client\\src\\Connection\\socket_connection.js",[],["63","64"],"Q:\\iTransition_Tasks\\Task#5\\client\\src\\components\\Login.jsx",[],"Q:\\iTransition_Tasks\\Task#5\\client\\src\\components\\Rooms.jsx",[],"Q:\\iTransition_Tasks\\Task#5\\client\\src\\components\\NavBar.jsx",[],"Q:\\iTransition_Tasks\\Task#5\\client\\src\\components\\Modal.jsx",[],"Q:\\iTransition_Tasks\\Task#5\\client\\src\\components\\Field.jsx",["65"],"import React, { useState, useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {Cell} from './Cell.jsx';\r\nimport '../styles/TickTack.css';\r\nimport socket from '../Connection/socket_connection';\r\nimport queryString from 'query-string';\r\nimport {Spring} from 'react-spring/renderprops';\r\n\r\nexport const Field = () => {\r\n    \r\n    const history = useHistory();\r\n\r\n    const [game, setGame] = useState({\r\n        field: Array(9).fill(null),\r\n        next: false,\r\n        active: false\r\n    })\r\n    const [sys_msg, setSys] = useState({\r\n        user: '',\r\n        message: '',\r\n    })\r\n    const [sys_room, setRoom] = useState(null);\r\n    const [list_of_users, setList] = useState([]);\r\n    const [leave, setLeave] = useState(false);\r\n\r\n\r\n    const clickHandler = (value) => { \r\n        const copyField = game.field;\r\n\r\n        const userCreds = JSON.parse(localStorage.getItem('userInfo'));\r\n\r\n        if(getWinner(game.field) || copyField[value]) return;\r\n\r\n        if((game.active === false && userCreds.username === list_of_users[0].username) || (game.active === false && userCreds.username === list_of_users[1].username)) {\r\n            copyField[value] = game.next ? \"X\" : \"O\";\r\n            \r\n\r\n            setGame({active: true});\r\n\r\n            socket.emit('move', {field: copyField, next: !game.next, active: false, room: sys_room});\r\n\r\n            setGame({field: copyField})\r\n\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    const LeaveHandler = () => {\r\n        history.push('/rooms');\r\n        setLeave(!leave);\r\n        window.location.reload()\r\n    }\r\n\r\n    const drawField =(value) => { \r\n        return (\r\n            <Cell onClick={() => clickHandler(value)} value={game.field[value]} key={value+1}/>\r\n        )\r\n    }\r\n\r\n    const getWinner = (field) => {\r\n        const fieldCells = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6]\r\n        ]\r\n\r\n        for (let i = 0; i < fieldCells.length; i++) {\r\n            const [a, b, c] = fieldCells[i];\r\n            if(field[a] && field[a] === field[b] && field[a] === field[c]) return field[a];\r\n        }\r\n\r\n        if(field.includes(null) == false) return false;\r\n        return null;\r\n    }\r\n\r\n    useEffect(() => {\r\n        \r\n        const {room} = queryString.parse(window.location.search);\r\n        \r\n        setRoom(room);\r\n\r\n        socket.on('system_msg', ({user, message}) => { \r\n            setSys({user, message})\r\n        })\r\n\r\n        socket.emit(\"room\", room);\r\n\r\n        \r\n        \r\n    }, [sys_msg])\r\n\r\n    useEffect(()=> {\r\n        socket.on('All users', (usersInRoom) => {\r\n            setList(usersInRoom);\r\n        })\r\n\r\n        \r\n    })\r\n\r\n    useEffect(() => {\r\n        socket.on('drawingMove', (game) => {\r\n            \r\n            setGame({field: game.field, next: game.next, active: game.active});\r\n        })\r\n    })\r\n\r\n   const cellArr = [];\r\n\r\n    for (let i = 0; i < 9; i++) {\r\n        \r\n        cellArr.push(drawField(i));\r\n    }\r\n\r\n    //\r\n    const winner = getWinner(game.field);\r\n\r\n    let modalWinner;\r\n    if(winner) {\r\n        modalWinner = `The winner is ${winner}`;\r\n    }\r\n    else if(winner === false) {\r\n        modalWinner = \"It's draw!\"\r\n    }\r\n    else { \r\n        modalWinner = '';\r\n    }\r\n    //\r\n    \r\n    return(\r\n        <>\r\n        {sys_msg.message ? \r\n        (<Spring \r\n            config={{duration: 2000}}\r\n            from={{opacity:0, marginTop: -500}}\r\n            to={{opacity:1, marginTop: 35}}\r\n            >\r\n                {props => <div className=\"system-wrapper\" style={props}>\r\n                            <p className=\"system-message\">{sys_msg.message}</p>\r\n                        </div>}\r\n            </Spring>) : ''\r\n        }\r\n        \r\n        <Spring\r\n        config={{duration: 800}}\r\n        from={{opacity:0, marginLeft:500}}\r\n        to={{opacity:1, marginLeft:10}}>\r\n            {props => (\r\n                <div className=\"wrapper\" style={props}>\r\n                <p>Room number #{sys_room}</p>\r\n                <p>{modalWinner}</p>\r\n                </div>\r\n            )}\r\n           \r\n        </Spring>\r\n       \r\n       <Spring\r\n       config={{duration: 800}}\r\n       from={{opacity: 0, marginLeft: -500}}\r\n       to={{opacity:1, marginLeft: 10}}\r\n       >\r\n           {props => (\r\n               <>\r\n                <button style={props} className=\"btn btn-primary btn-wrap\" onClick={()=> LeaveHandler()}>Leave the room</button> \r\n                <div style={props} className=\"connected-wrapper\">\r\n                    <p>Connected users:</p>\r\n                        {list_of_users.map((user, index)=> (\r\n                            <div className=\"users-list\" key={index}>{user.username}</div>\r\n                        ))}\r\n                </div>\r\n                </>\r\n           )}\r\n       \r\n        </Spring>\r\n                {list_of_users.length < 2 ? <h3 className=\"ml-2 mt-5\">Waiting for the opponent...</h3> \r\n                : \r\n                <Spring\r\n                config={{duration: 1000}}\r\n                from={{opacity:0}}\r\n                to={{opacity:1}}\r\n                >\r\n                    {props => (\r\n                        <div className=\"field-wrapper\" style={props}>\r\n                            <div className=\"field\">\r\n                                {cellArr}\r\n                            </div>\r\n                    </div>\r\n                    )}\r\n                </Spring>\r\n                }\r\n       \r\n        </>\r\n    )\r\n}","Q:\\iTransition_Tasks\\Task#5\\client\\src\\components\\Cell.jsx",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"66","replacedBy":"70"},{"ruleId":"68","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":78,"column":33,"nodeType":"74","messageId":"75","endLine":78,"endColumn":35},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],["76"],["77"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]